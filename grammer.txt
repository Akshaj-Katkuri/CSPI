statements      : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement       : KEYWORD: RETURN expr?
                : KEYWORD: CONTINUE
                : KEYWORD: BREAK
                : expr

expr            : KEYWORD:VAR IDENTIFIER EQ expr
                : comparisn-expr ((KEYWORD:AND|KEYWORD:OR) comparisn-expr)*

comparisn-expr  : NOT comparisn-expr
                : arithmetic-expr ((EE|NE|LT|GT|LTE|GTE) arithmetic-expr)*

arithmetic-expr : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV|MOD) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : LPAREN expr RPAREN
                : INT|FLOAT|STRING|IDENTIFIER
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : repeat-expr
                : func-def

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYWORD: IF LPAREN expr RPAREN NEWLINE* LCURL
                  statements RCURL (elif-expr|else-expr)?

elif-expr       : KEYWORD:ELIF LPAREN expr RPAREN NEWLINE* LCURL
                  statements RCURL (elif-expr|else-expr)?

else-expr       : KEYWORD:ELSE NEWLINE* LCURL
                  statementS RCURL

for-expr        : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                  (KEYWORD:STEP expr)? KEYWORD:THEN 
                  statement
                | (NEWLINE statements KEYWORD:END)

while-expr      : KEYWORD:WHILE expr KEYWORD:THEN 
                  statement
                | (NEWLINE statements KEYWORD:END)

repeat-expr     : KEYWORD:REPEAT
                  (KEYWORD:UNTIL LPAREN expr RPAREN) 
                | (INT KEYWORD:TIMES)
                  NEWLINE* LCURL statements RCURL

func-def        : KEYWORD:PROCEDURE IDENTIFIER?
                  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN 
                  (ARROW expr)
                | (NEWLINE* LCURL statements RCURL)

*       : 0 or more of what is before the *
?       : before the ? is optional
+       : 1 or more of what is before the +
|       : or